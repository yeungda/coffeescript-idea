/* The following code was generated by JFlex 1.4.3 on 10/26/10 8:54 PM */

/*
 * Copyright 2010 David Yeung
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.coffeescript.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/26/10 8:54 PM from the specification file
 * <tt>/Users/michi/Repositories/coffeescript-idea/src/org/coffeescript/lang/lexer/CoffeeScript.flex</tt>
 */
public class _CoffeeScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGULAR_EXPRESSION = 16;
  public static final int VERB = 4;
  public static final int REGULAR_EXPRESSION_FLAG = 18;
  public static final int DOUBLE_QUOTE_STRING = 8;
  public static final int INTERPOLATION = 22;
  public static final int SINGLE_QUOTE_HEREDOC = 14;
  public static final int DOUBLE_QUOTE_HEREDOC = 12;
  public static final int SINGLE_QUOTE_STRING = 10;
  public static final int YYINITIAL = 0;
  public static final int NOUN = 2;
  public static final int JAVASCRIPT = 20;
  public static final int NOUN_OR_VERB = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\20\2\0\1\2\22\0\1\34\1\14\1\25\1\17"+
    "\1\3\1\56\1\57\1\26\1\67\1\63\1\56\1\15\1\64\1\13"+
    "\1\11\1\31\1\5\11\4\1\22\1\65\1\61\1\16\1\21\1\56"+
    "\1\66\6\10\11\3\1\55\7\3\1\7\2\3\1\70\1\27\1\71"+
    "\1\62\1\54\1\30\1\36\1\74\1\35\1\40\1\12\1\41\1\33"+
    "\1\51\1\46\1\3\1\75\1\43\1\52\1\45\1\23\1\53\1\3"+
    "\1\24\1\37\1\44\1\42\1\47\1\50\1\6\1\73\1\3\1\32"+
    "\1\60\1\72\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\2\0\1\2\1\3\1\4\1\5\2\6"+
    "\1\5\3\7\1\2\1\10\2\5\1\11\1\12\1\13"+
    "\1\14\15\5\2\2\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\5\1\24\1\5\1\25\1\5\1\7"+
    "\6\5\1\26\1\2\3\7\1\27\1\7\1\27\10\2"+
    "\3\7\1\30\1\31\3\5\1\32\1\2\1\33\1\2"+
    "\1\34\1\35\3\36\2\37\1\40\1\41\1\2\1\42"+
    "\1\1\1\43\1\44\3\0\3\5\1\45\2\10\2\46"+
    "\1\47\1\5\2\0\7\5\1\50\12\5\1\47\2\5"+
    "\1\46\12\5\1\46\1\51\3\5\1\7\1\0\1\7"+
    "\1\46\5\0\2\46\1\0\1\46\1\5\1\46\1\52"+
    "\1\53\1\54\2\0\1\55\1\42\1\1\2\6\1\0"+
    "\1\6\4\5\1\10\1\5\1\56\1\57\33\5\1\25"+
    "\1\5\1\0\1\27\3\0\1\5\1\60\1\61\1\42"+
    "\1\1\2\5\1\10\1\0\10\5\1\62\7\5\1\0"+
    "\1\42\1\1\1\5\1\10\1\0\11\5\1\0\1\42"+
    "\1\63\1\0\6\5\1\63\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u02e8\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u02e8\0\u045c\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u02e8\0\u02e8\0\u060e\0\u064c"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u02e8\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u02e8\0\u02e8\0\u02e8\0\u09b0\0\u09ee\0\u02e8\0\u0a2c"+
    "\0\u045c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u0934\0\u0972\0\u103a\0\u02e8\0\u02e8\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u02e8\0\u11ae\0\u11ec\0\u02e8\0\u02e8"+
    "\0\u1170\0\u122a\0\u02e8\0\u1268\0\u12a6\0\u02e8\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u02e8\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u02e8\0\u1550\0\u158e\0\u0364\0\u15cc\0\u0364\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u0364\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u02e8\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u02e8\0\u21aa\0\u21e8\0\u2226\0\u1bda\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u2264\0\u22a2\0\u02e8\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u239a\0\u1458\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u02e8\0\u02e8\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u28ee\0\u292c\0\u1ae2\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u02e8\0\u2b98\0\u2bd6"+
    "\0\u02e8\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u02e8\0\u02e8\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u0364\0\u3070\0\u30ae"+
    "\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u02e8"+
    "\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u02e8\0\u32dc\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u35c4\0\u3776"+
    "\0\u37b4\0\u37f2\0\u3830\0\u386e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\21\1\22\3\20\1\15"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\17\2\15"+
    "\1\31\1\32\1\33\1\34\1\15\1\35\1\26\1\36"+
    "\1\20\1\16\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\3\20\1\53"+
    "\1\20\1\26\1\54\1\55\2\15\1\56\1\15\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\20"+
    "\1\15\1\16\1\67\1\20\1\21\1\22\3\20\1\15"+
    "\1\70\1\24\1\25\1\26\1\71\1\30\1\67\2\15"+
    "\1\72\1\32\1\33\1\34\1\15\1\35\1\73\1\36"+
    "\1\20\1\16\1\74\1\40\1\41\1\75\1\76\1\44"+
    "\1\20\1\46\1\77\1\100\1\20\1\101\5\20\1\26"+
    "\1\54\1\55\2\15\1\56\2\15\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\20\1\15\1\16\1\67"+
    "\6\15\1\102\1\103\1\104\1\105\1\106\1\107\1\30"+
    "\1\67\1\110\1\111\1\112\5\15\1\26\2\15\1\16"+
    "\1\15\1\113\2\15\1\114\1\115\1\15\1\116\1\117"+
    "\1\120\1\15\1\121\5\15\1\26\1\122\1\123\1\124"+
    "\1\26\1\125\1\126\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\4\15\1\16\1\67\1\20\1\21\1\22\3\20"+
    "\1\102\1\70\1\104\1\105\1\106\1\107\1\30\1\67"+
    "\1\110\1\111\1\127\1\32\1\33\1\34\1\15\1\35"+
    "\1\26\1\36\1\20\1\16\1\74\1\40\1\41\1\75"+
    "\1\76\1\44\1\20\1\130\1\77\1\131\1\20\1\101"+
    "\5\20\1\26\1\122\1\123\1\124\1\26\1\125\1\126"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\20\2\132\1\17\14\132\1\133\1\17\4\132\1\134"+
    "\1\132\1\135\2\132\1\15\43\132\2\136\1\17\15\136"+
    "\1\17\5\136\1\137\1\135\46\136\2\140\1\17\14\140"+
    "\1\141\1\17\4\140\1\142\50\140\2\143\1\17\15\143"+
    "\1\17\5\143\1\144\47\143\2\145\1\146\14\145\1\133"+
    "\1\146\6\145\1\147\1\145\1\150\1\15\43\145\20\15"+
    "\1\0\12\15\1\151\12\15\1\151\3\15\1\151\20\15"+
    "\1\151\2\15\30\152\1\153\45\152\1\15\1\16\1\67"+
    "\1\20\1\21\1\22\3\20\1\15\1\70\1\27\2\15"+
    "\1\27\1\30\1\67\2\15\1\31\1\32\1\33\1\34"+
    "\1\15\1\35\1\15\1\36\1\20\1\16\1\74\1\40"+
    "\1\41\1\75\1\76\1\44\1\20\1\46\1\77\1\100"+
    "\1\20\1\101\5\20\5\15\1\56\2\15\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\20\77\0\1\16"+
    "\15\0\1\30\14\0\1\16\44\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\21\20\15\0\3\20"+
    "\4\0\2\21\3\0\1\154\1\155\67\0\2\21\2\156"+
    "\1\0\1\154\1\155\66\0\3\20\1\157\2\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\6\20\1\160"+
    "\1\20\1\161\10\20\15\0\3\20\21\0\1\162\70\0"+
    "\1\26\61\0\17\163\1\164\1\0\55\163\3\0\6\20"+
    "\1\0\1\20\10\0\1\20\1\165\6\0\1\20\1\0"+
    "\4\20\1\166\3\20\1\167\10\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\170\10\0\2\20\6\0\1\20\1\0"+
    "\21\20\15\0\3\20\25\0\1\171\76\0\1\172\52\0"+
    "\6\20\1\0\1\20\10\0\1\173\1\20\6\0\1\20"+
    "\1\0\1\20\1\174\4\20\1\175\12\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\10\20\1\176\10\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\5\20"+
    "\1\177\5\20\1\200\5\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\201\10\0\1\202\1\20\6\0\1\20\1\0"+
    "\21\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\1\203\1\20\6\0\1\20\1\0\1\20\1\204\3\20"+
    "\1\205\3\20\1\206\7\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\10\20"+
    "\1\207\10\20\15\0\3\20\3\0\6\20\1\0\1\210"+
    "\10\0\2\20\6\0\1\20\1\0\21\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\1\20\1\211\6\0"+
    "\1\20\1\0\14\20\1\212\4\20\15\0\1\213\2\20"+
    "\3\0\6\20\1\0\1\214\10\0\1\215\1\20\6\0"+
    "\1\20\1\0\1\20\1\216\3\20\1\217\13\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\2\20\1\220\1\20\1\165\3\20\1\221"+
    "\4\20\1\222\3\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\1\223\1\20\6\0\1\20\1\0\1\20"+
    "\1\224\17\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\11\20\1\225\2\20"+
    "\1\226\4\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\17\20\1\227\1\20"+
    "\15\0\3\20\57\0\1\26\76\0\1\26\20\0\6\20"+
    "\1\0\1\230\10\0\2\20\6\0\1\20\1\0\21\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\1\20"+
    "\1\231\6\0\1\20\1\0\21\20\15\0\1\165\2\20"+
    "\3\0\3\20\1\232\2\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\6\20\1\160\12\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\1\20\1\233\6\0"+
    "\1\20\1\0\4\20\1\166\3\20\1\167\10\20\15\0"+
    "\3\20\34\234\1\0\41\234\3\0\6\20\1\0\1\20"+
    "\10\0\1\235\1\20\6\0\1\20\1\0\1\20\1\236"+
    "\4\20\1\175\12\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\237\10\0\2\20\6\0\1\20\1\0\21\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\1\203\1\20"+
    "\6\0\1\20\1\0\1\20\1\204\7\20\1\206\7\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\214\10\0\1\215"+
    "\1\20\6\0\1\20\1\0\5\20\1\217\13\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\2\20\1\220\1\20\1\165\3\20\1\221"+
    "\10\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\14\20\1\226\4\20\15\0"+
    "\3\20\11\0\1\240\127\0\1\241\45\0\1\26\5\0"+
    "\1\162\70\0\1\26\1\0\1\26\74\0\1\26\76\0"+
    "\1\26\2\0\1\162\72\0\1\26\2\0\1\242\76\0"+
    "\1\26\77\0\1\243\116\0\1\244\53\0\1\245\117\0"+
    "\1\246\101\0\1\247\47\0\1\250\111\0\1\251\1\0"+
    "\1\252\3\0\1\252\101\0\1\253\37\0\1\26\2\0"+
    "\1\26\42\0\1\26\17\0\6\20\1\0\1\20\10\0"+
    "\1\20\1\254\6\0\1\20\1\0\4\20\1\166\3\20"+
    "\1\167\10\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\1\20\1\211\6\0\1\20\1\0\14\20\1\255"+
    "\4\20\15\0\1\213\2\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\2\20\1\220\1\20"+
    "\1\165\3\20\1\256\10\20\15\0\3\20\2\132\1\0"+
    "\14\132\2\0\4\132\1\0\1\132\1\0\2\132\1\0"+
    "\43\132\32\0\1\257\43\0\20\260\1\0\4\260\3\261"+
    "\14\260\2\261\30\260\2\136\1\0\15\136\1\0\5\136"+
    "\2\0\46\136\25\0\1\262\76\0\1\263\47\0\2\145"+
    "\1\0\14\145\2\0\6\145\1\0\1\145\2\0\43\145"+
    "\20\264\1\0\55\264\33\0\1\265\12\0\1\265\3\0"+
    "\1\265\20\0\1\265\35\0\1\266\12\0\1\266\3\0"+
    "\1\266\20\0\1\266\2\0\30\152\1\0\45\152\4\0"+
    "\2\267\74\0\2\270\5\0\1\271\1\0\1\271\64\0"+
    "\2\272\2\0\1\272\1\0\1\272\22\0\2\272\1\0"+
    "\2\272\32\0\1\272\4\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\7\20\1\273\6\20\1\274"+
    "\2\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\2\20\1\275\16\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\5\20\1\276\13\20\15\0\3\20\20\163"+
    "\1\0\74\163\1\277\1\0\55\163\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\4\20\1\167"+
    "\14\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\7\20\1\300\11\20\15\0"+
    "\3\20\25\0\1\301\76\0\1\302\52\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\10\20\1\303"+
    "\10\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\2\20\1\304\4\20\1\305"+
    "\11\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\1\20\1\306\17\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\3\20\1\165\15\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\16\20\1\307\2\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\11\20\1\236"+
    "\7\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\4\20\1\310\1\20\1\311"+
    "\12\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\1\20\1\165\6\0\1\20\1\0\21\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\6\20\1\312\12\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\10\20"+
    "\1\313\10\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\10\20\1\314\10\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\6\20\1\315\12\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\7\20\1\202\11\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\5\20"+
    "\1\316\13\20\15\0\1\165\2\20\3\0\6\20\1\0"+
    "\1\20\10\0\1\20\1\317\6\0\1\20\1\0\11\20"+
    "\1\320\7\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\16\20\1\321\2\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\13\20\1\165\5\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\7\20\1\165\11\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\7\20"+
    "\1\322\11\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\6\20\1\323\12\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\10\20\1\324\10\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\2\20\1\325\16\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\16\20"+
    "\1\274\2\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\11\20\1\326\7\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\1\20"+
    "\1\202\6\0\1\20\1\0\21\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\7\20\1\327\11\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\330\10\0\2\20\6\0\1\20\1\0\11\20\1\331"+
    "\7\20\15\0\3\20\3\0\6\20\1\0\1\332\10\0"+
    "\2\20\6\0\1\20\1\0\2\20\1\333\11\20\1\334"+
    "\4\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\2\20\1\167\16\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\335\10\0\2\20\6\0"+
    "\1\20\1\0\21\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\7\20\1\273"+
    "\11\20\15\0\3\20\3\0\6\20\1\0\1\20\3\0"+
    "\1\336\4\0\2\20\6\0\1\20\1\0\21\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\10\20\1\337\10\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\7\20\1\305\11\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\6\20\1\311"+
    "\12\20\15\0\3\20\11\0\1\26\123\0\1\340\57\0"+
    "\1\26\72\0\1\341\117\0\1\252\61\0\1\252\114\0"+
    "\1\342\44\0\1\343\127\0\1\252\76\0\1\250\76\0"+
    "\1\344\32\0\6\20\1\0\1\20\3\0\1\341\4\0"+
    "\2\20\6\0\1\20\1\0\21\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\345\10\0\1\20\1\317\6\0\1\20"+
    "\1\0\11\20\1\320\7\20\15\0\3\20\25\0\1\346"+
    "\76\0\1\347\102\0\1\350\12\0\1\350\3\0\1\350"+
    "\20\0\1\350\35\0\1\351\12\0\1\351\3\0\1\351"+
    "\20\0\1\351\6\0\2\267\4\0\1\155\67\0\2\270"+
    "\73\0\6\20\1\0\1\352\10\0\2\20\6\0\1\20"+
    "\1\0\21\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\1\353\1\20\6\0\1\20\1\0\21\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\165\10\0\2\20\6\0"+
    "\1\20\1\0\21\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\15\20\1\202"+
    "\3\20\15\0\3\20\17\277\1\354\1\355\55\277\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\5\20\1\356\13\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\2\20\1\210"+
    "\4\20\1\357\11\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\202\10\0\2\20\6\0\1\20\1\0\21\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\1\360\20\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\2\20"+
    "\1\361\16\20\15\0\3\20\3\0\6\20\1\0\1\203"+
    "\10\0\2\20\6\0\1\20\1\0\21\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\1\20\1\362\17\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\363\10\0\2\20\6\0\1\20\1\0\21\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\2\20\1\316\16\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\1\364\20\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\1\20\1\365"+
    "\17\20\15\0\3\20\3\0\6\20\1\0\1\306\10\0"+
    "\2\20\6\0\1\20\1\0\21\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\167\10\0\2\20\6\0\1\20\1\0"+
    "\21\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\1\214\1\20\6\0\1\20\1\0\21\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\2\20\1\366\16\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\367\10\0\2\20\6\0\1\20\1\0\21\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\11\20\1\370\7\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\6\20\1\366\12\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\7\20"+
    "\1\371\11\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\3\20\1\202\15\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\14\20\1\202\4\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\1\20\1\275\6\0"+
    "\1\20\1\0\10\20\1\165\10\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\6\20\1\275\12\20\15\0\3\20\3\0\3\20\1\372"+
    "\2\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\21\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\6\20\1\373\12\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\1\20\1\374\17\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\1\20\1\375\17\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\7\20\1\357"+
    "\11\20\15\0\3\20\12\0\1\252\75\0\1\376\130\0"+
    "\1\252\73\0\1\340\35\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\10\20\1\165\10\20\15\0"+
    "\3\20\33\0\1\377\12\0\1\377\3\0\1\377\20\0"+
    "\1\377\35\0\1\u0100\12\0\1\u0100\3\0\1\u0100\20\0"+
    "\1\u0100\5\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\10\20\1\u0101\10\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\1\20\1\210\6\0\1\20"+
    "\1\0\21\20\15\0\3\20\17\277\1\u0102\1\355\55\277"+
    "\17\355\1\u0103\56\355\3\0\6\20\1\0\1\20\10\0"+
    "\1\20\1\345\6\0\1\20\1\0\21\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\11\20\1\u0104\7\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\14\20"+
    "\1\165\4\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\2\20\1\165\16\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\5\20\1\u0105\13\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\7\20\1\275\11\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\7\20"+
    "\1\u0106\11\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\6\20\1\u0107\12\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\1\u0108"+
    "\1\20\6\0\1\20\1\0\21\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\12\20\1\304\6\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\1\20\1\u0109"+
    "\17\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\7\20\1\u010a\11\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\11\20\1\u010b\7\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\2\20\1\u010c\16\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\21\20\15\0"+
    "\2\20\1\165\37\0\1\u010d\71\0\1\u010e\12\0\1\u010e"+
    "\3\0\1\u010e\20\0\1\u010e\5\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\3\20\1\361\15\20"+
    "\15\0\3\20\17\277\1\u010f\1\355\55\277\17\355\1\u0110"+
    "\56\355\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\10\20\1\u0111\10\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\6\20\1\210\12\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\2\20\6\0\1\20\1\0\11\20\1\u0112"+
    "\7\20\15\0\3\20\3\0\6\20\1\0\1\20\10\0"+
    "\2\20\6\0\1\20\1\0\6\20\1\u0113\12\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\4\20\1\165\14\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\10\20\1\u0114\10\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\u0115\10\0\2\20\6\0\1\20\1\0\21\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\1\304\20\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\20\20"+
    "\1\u0116\15\0\3\20\37\0\1\252\36\0\17\355\1\u0117"+
    "\56\355\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\5\20\1\275\13\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\1\u0118\1\20\6\0\1\20"+
    "\1\0\21\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\2\20\6\0\1\20\1\0\21\20\15\0\1\165"+
    "\2\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\1\321\20\20\15\0\3\20\3\0\6\20"+
    "\1\0\1\20\10\0\2\20\6\0\1\20\1\0\10\20"+
    "\1\u0119\10\20\15\0\3\20\3\0\6\20\1\0\1\20"+
    "\10\0\1\20\1\u011a\6\0\1\20\1\0\21\20\15\0"+
    "\3\20\3\0\6\20\1\0\1\20\10\0\2\20\6\0"+
    "\1\20\1\0\10\20\1\202\10\20\15\0\3\20\3\0"+
    "\6\20\1\0\1\20\10\0\2\20\6\0\1\20\1\0"+
    "\3\20\1\u011b\15\20\15\0\3\20\3\0\6\20\1\0"+
    "\1\20\10\0\1\u011c\1\20\6\0\1\20\1\0\21\20"+
    "\15\0\3\20\3\0\6\20\1\0\1\20\10\0\2\20"+
    "\6\0\1\20\1\0\2\20\1\202\16\20\15\0\3\20"+
    "\3\0\6\20\1\0\1\20\10\0\2\20\6\0\1\20"+
    "\1\0\16\20\1\202\2\20\15\0\3\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\2\0\1\11\1\1\1\11\6\1\1\11"+
    "\6\1\2\11\17\1\7\11\2\1\1\11\35\1\2\11"+
    "\5\1\1\11\2\1\2\11\2\1\1\11\2\1\1\11"+
    "\4\1\1\11\3\0\3\1\1\11\6\1\2\0\41\1"+
    "\1\11\4\1\1\0\2\1\5\0\1\1\1\11\1\0"+
    "\3\1\3\11\2\0\1\11\4\1\1\0\7\1\2\11"+
    "\33\1\1\11\1\1\1\0\1\11\3\0\1\1\2\11"+
    "\5\1\1\0\20\1\1\0\1\1\1\11\2\1\1\0"+
    "\11\1\1\0\1\11\1\1\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    private void yypushState(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    private void yypopState() {
        yybegin(stack.pop());
    }

    // For Demetra compatibility
    public void reset(CharSequence buffer, int initialState){
        zzBuffer = buffer;
        zzBufferArray = null;
        zzCurrentPos = zzMarkedPos = zzStartRead = 0;
        zzPushbackPos = 0;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = buffer.length();
        yybegin(initialState);
    }


  public _CoffeeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CoffeeScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.KEYWORD;
          }
        case 52: break;
        case 20: 
          { yybegin(NOUN_OR_VERB); return CoffeeScriptTokenTypes.LINE_TERMINATOR;
          }
        case 53: break;
        case 37: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.FUNCTION;
          }
        case 54: break;
        case 45: 
          { return CoffeeScriptTokenTypes.REGULAR_EXPRESSION_LITERAL;
          }
        case 55: break;
        case 3: 
          { return CoffeeScriptTokenTypes.WHITESPACE;
          }
        case 56: break;
        case 17: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.BRACKET;
          }
        case 57: break;
        case 35: 
          { return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 58: break;
        case 19: 
          { if (stack.empty()) {
            yybegin(VERB); return CoffeeScriptTokenTypes.BRACE;
        } else {
            yypopState(); return CoffeeScriptTokenTypes.INTERPOLATION;
        }
          }
        case 59: break;
        case 30: 
          { return CoffeeScriptTokenTypes.DOUBLE_QUOTE_HEREDOC;
          }
        case 60: break;
        case 28: 
          { return CoffeeScriptTokenTypes.SINGLE_QUOTE_STRING;
          }
        case 61: break;
        case 39: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.BOOLEAN;
          }
        case 62: break;
        case 6: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.NUMBER;
          }
        case 63: break;
        case 31: 
          { return CoffeeScriptTokenTypes.SINGLE_QUOTE_HEREDOC;
          }
        case 64: break;
        case 43: 
          { return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 65: break;
        case 16: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.PARENTHESIS;
          }
        case 66: break;
        case 48: 
          { yybegin(VERB);  return CoffeeScriptTokenTypes.DOUBLE_QUOTE_HEREDOC;
          }
        case 67: break;
        case 4: 
          { return CoffeeScriptTokenTypes.LINE_TERMINATOR;
          }
        case 68: break;
        case 49: 
          { yybegin(VERB);  return CoffeeScriptTokenTypes.SINGLE_QUOTE_HEREDOC;
          }
        case 69: break;
        case 41: 
          { yypushback(1); yybegin(REGULAR_EXPRESSION); return CoffeeScriptTokenTypes.REGULAR_EXPRESSION;
          }
        case 70: break;
        case 47: 
          { yybegin(SINGLE_QUOTE_HEREDOC); return CoffeeScriptTokenTypes.SINGLE_QUOTE_HEREDOC;
          }
        case 71: break;
        case 12: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.BRACE;
          }
        case 72: break;
        case 44: 
          { return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 73: break;
        case 50: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.KEYWORD;
          }
        case 74: break;
        case 26: 
          { return CoffeeScriptTokenTypes.DOUBLE_QUOTE_STRING;
          }
        case 75: break;
        case 14: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.SEMI_COLON;
          }
        case 76: break;
        case 24: 
          { return CoffeeScriptTokenTypes.PARENTHESIS;
          }
        case 77: break;
        case 18: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.BRACKET;
          }
        case 78: break;
        case 23: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.ASSIGNMENT;
          }
        case 79: break;
        case 29: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.SINGLE_QUOTE_STRING;
          }
        case 80: break;
        case 13: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.PARENTHESIS;
          }
        case 81: break;
        case 15: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.ACCESSOR;
          }
        case 82: break;
        case 5: 
          { yybegin(NOUN_OR_VERB); return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 83: break;
        case 42: 
          { yypushState(INTERPOLATION); return CoffeeScriptTokenTypes.INTERPOLATION;
          }
        case 84: break;
        case 7: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.OPERATOR;
          }
        case 85: break;
        case 33: 
          { yybegin(YYINITIAL); return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 86: break;
        case 22: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.DOT;
          }
        case 87: break;
        case 9: 
          { yybegin(DOUBLE_QUOTE_STRING); return CoffeeScriptTokenTypes.DOUBLE_QUOTE_STRING;
          }
        case 88: break;
        case 1: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.REGULAR_EXPRESSION_FLAG;
          }
        case 89: break;
        case 11: 
          { yybegin(JAVASCRIPT); return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 90: break;
        case 27: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.DOUBLE_QUOTE_STRING;
          }
        case 91: break;
        case 25: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.COMMA;
          }
        case 92: break;
        case 40: 
          { return CoffeeScriptTokenTypes.RESERVED_WORD;
          }
        case 93: break;
        case 21: 
          { return CoffeeScriptTokenTypes.ASSIGNMENT;
          }
        case 94: break;
        case 32: 
          { return CoffeeScriptTokenTypes.REGULAR_EXPRESSION;
          }
        case 95: break;
        case 51: 
          { return CoffeeScriptTokenTypes.BLOCK_COMMENT;
          }
        case 96: break;
        case 34: 
          { final int length = yytext().length();
        if (length > 1) {
            yypushback(length -1);
            yybegin(REGULAR_EXPRESSION_FLAG);
        } else {
            yybegin(VERB);
        }
        return CoffeeScriptTokenTypes.REGULAR_EXPRESSION;
          }
        case 97: break;
        case 2: 
          { yybegin(YYINITIAL);   return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 98: break;
        case 10: 
          { yybegin(SINGLE_QUOTE_STRING); return CoffeeScriptTokenTypes.SINGLE_QUOTE_STRING;
          }
        case 99: break;
        case 36: 
          { yybegin(YYINITIAL); return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 100: break;
        case 46: 
          { yybegin(DOUBLE_QUOTE_HEREDOC); return CoffeeScriptTokenTypes.DOUBLE_QUOTE_HEREDOC;
          }
        case 101: break;
        case 8: 
          { return CoffeeScriptTokenTypes.COMMENT;
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
